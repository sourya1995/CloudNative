AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  DeployId:
    Type: String
    Default: afsf34sfdg
  SourceCodeBucket:
    Type: String
    Default: afsf34sfdg
Resources:
  AuthorizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: AuthorizerLambda
      Code:
        S3Bucket:
          Ref: SourceCodeBucket
        S3Key: !Sub "${DeployId}.zip"
      Runtime: nodejs16.x
      Timeout: 3
      MemorySize: 128
  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Body:
        openapi: "3.0.1"
        info:
          title: "EducativeRestAPI"
          description: "Rest API for Educative API Gateway Course"
          version: "2022-06-06T10:08:49Z"
        paths:
          /joke:
            get:
              responses:
                "200":
                  description: "200 response"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
                - authorizer: []
              x-amazon-apigateway-integration:
                httpMethod: "GET"
                uri: "https://icanhazdadjoke.com"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                type: "http"
        components:
          schemas:
            Empty:
              title: "Empty Schema"
              type: "object"
          securitySchemes:
            authorizer:
              type: "apiKey"
              name: "authorization"
              in: "header"
              x-amazon-apigateway-authtype: "custom"
              x-amazon-apigateway-authorizer:
                authorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AuthorizerLambda/invocations"
                authorizerCredentials: !GetAtt LambdaExecutionRole.Arn
                authorizerResultTtlInSeconds: 300
                type: "token"
      Name: EducativeRestAPI
      Description: "Rest API for Educative API Gateway Course"
      Mode: overwrite
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EducativeLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:AuthorizerLambda"
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: RestAPI
      StageName: v1